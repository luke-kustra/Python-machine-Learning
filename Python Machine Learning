import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import xgboost
print(xgboost.__version__)

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn import metrics

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("C:\\Users\\luke0\\Downloads\\NewData (1).csv")

print(df.head())
print(df.tail())
print(df.shape)
print(df.describe())
print(df.info())

print(df.shape)
#print("hello world")

plt.figure(figsize=(15,5))
plt.plot(df['Close'])
plt.title('Tesla Close price.', fontsize=15)
plt.ylabel('Price in dollars.')
plt.show()

df[df['Close'] == df['Adj Close']].shape

print("Available columns:", df.columns.tolist())

# Remove the 'Adj Close' column
if 'Adj Close' in df.columns:
    df = df.drop('Adj Close', axis=1)
else:
    print("Column 'Adj Close' not found in the DataFrame.")

print(df.head()) # Display the first few rows of the updated DataFrame

#df = df.drop(['Adj Close'], axis=1)

df.isnull().sum()

features = ['Open', 'High', 'Low', 'Close', 'Volume']

plt.subplots(figsize=(20,10))

for i, col in enumerate(features):
  plt.subplot(2,3,i+1)
  sb.distplot(df[col])
plt.show()

plt.subplots(figsize=(20,10))
for i, col in enumerate(features):
  plt.subplot(2,3,i+1)
  sb.boxplot(df[col])
plt.show()


for i, col in enumerate(features):
    plt.subplot(2, 3, i + 1)
    sb.boxplot(x=df[col], showfliers=False) 
    plt.title(col)

plt.tight_layout()
plt.show()

splitted = df['Date'].str.split('/', expand=True)

df['day'] = splitted[1].astype('int')
df['month'] = splitted[0].astype('int')
df['year'] = splitted[2].astype('int')

print(df.head())

df['is_quarter_end'] = np.where(df['month']%3==0,1,0)
print(df.head())

#df.drop('Date', axis=1).groupby('is_quarter_end').mean()

data_grouped = df.drop('Date', axis=1).groupby('year').mean()
plt.subplots(figsize=(20,10))

for i, col in enumerate(['Open', 'High', 'Low', 'Close']):
  plt.subplot(2,2,i+1)
  data_grouped[col].plot.bar()
plt.show()


df['open-close']  = df['Open'] - df['Close']
df['low-high']  = df['Low'] - df['High']
df['target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)

plt.pie(df['target'].value_counts().values, labels=[0, 1], autopct='%1.1f%%')
plt.show()

plt.figure(figsize=(10, 10)) 


sb.heatmap(df.drop('Date', axis=1).corr() > 0.9, annot=True, cbar=False)
plt.show()

features = df[['open-close', 'low-high', 'is_quarter_end']]
target = df['target']

scaler = StandardScaler()
features = scaler.fit_transform(features)

X_train, X_valid, Y_train, Y_valid = train_test_split( features, target, test_size=0.1, random_state=2022)
print(X_train.shape, X_valid.shape)

models = [LogisticRegression(), SVC(kernel='poly', probability=True), XGBClassifier()]

for i in range(3):
  models[i].fit(X_train, Y_train)

  print(f'{models[i]} : ')
  print('Training Accuracy : ', metrics.roc_auc_score(Y_train, models[i].predict_proba(X_train)[:,1]))
  print('Validation Accuracy : ', metrics.roc_auc_score( Y_valid, models[i].predict_proba(X_valid)[:,1]))
  print()

from sklearn.metrics import ConfusionMatrixDisplay

for i in range(3):
  ConfusionMatrixDisplay.from_estimator(models[i], X_valid, Y_valid)
  plt.show()

#print('hello')
